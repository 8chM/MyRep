blueprint:
  name: Thermostat Scheduler
  description: 'Set temperature on a thermostat based on specified times and presence detection'
  domain: automation
  input:
    thermostat_entity:
      name: Thermostat Entity
      description: The entity ID of the thermostat
      selector:
        entity:
          domain: climate
    temp_day:
      name: Day Temperature
      description: The temperature to set during the day
      default: '22'
      selector:
        number:
          min: 0
          max: 50
          step: 1
          mode: slider
          unit_of_measurement: "°C"
    temp_night:
      name: Night Temperature
      description: The temperature to set during the night
      default: '18'
      selector:
        number:
          min: 0
          max: 50
          step: 1
          mode: slider
          unit_of_measurement: "°C"
    presence_entity:
      name: Presence Entity
      description: The entity ID of the device to use for presence detection
      selector:
        entity:
          domain: device_tracker
    presence_check:
      name: Presence Check
      description: Check for presence before adjusting temperature
      default: true
      selector:
        boolean: {}
    min_temp:
      name: Minimum Temperature
      description: The temperature to set when no presence is detected
      default: '16'
      selector:
        number:
          min: 0
          max: 50
          step: 1
          mode: slider
          unit_of_measurement: "°C"
    time_morning:
      name: Morning Time
      description: The time of day to set the day temperature
      selector:
        time: {}
    time_day:
      name: Day Time
      description: The time of day to set the day temperature
      selector:
        time: {}
    time_evening:
      name: Evening Time
      description: The time of day to set the night temperature
      selector:
        time: {}
    time_night:
      name: Night Time
      description: The time of day to set the night temperature
      selector:
        time: {}
  trigger:
    platform: time
    at:
      - "{{ states('input_datetime.time_morning') }}"
      - "{{ states('input_datetime.time_day') }}"
      - "{{ states('input_datetime.time_evening') }}"
      - "{{ states('input_datetime.time_night') }}"
  condition: "{{ input_boolean.presence_check.state == 'on' }}"
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: "{{ input_boolean.presence_entity_id }}"
        state: home
      sequence:
      - service: climate.set_temperature
        data:
          entity_id: "{{ input_text.thermostat_entity_id }}"
          temperature: "{{ input_number.temp_day }}"
    - conditions:
      - condition: time
        after: "{{ states('input_datetime.time_morning') }}"
        before: "{{ states('input_datetime.time_day') }}"
      sequence:
      - service: climate.set_temperature
        data:
          entity_id: "{{ input_text.thermostat_entity_id }}"
          temperature: "{{ input_number.temp_day }}"
    - conditions:
      - condition: time
        after: "{{ states
