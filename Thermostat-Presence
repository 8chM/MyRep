blueprint:
  name: Thermostat-Steuerung mit Anwesenheitskontrolle
  description: Steuert die Temperatur eines Thermostats basierend auf Anwesenheit und individuellen Zeitfenstern
  domain: automation
  input:
    anwesenheit:
      name: Anwesenheits-Tracker
      description: Entity-ID des Trackers für Anwesenheitserkennung
      selector:
        entity:
          domain: device_tracker
    entity_id:
      name: Thermostat
      description: Entity-ID des Thermostats
      selector:
        entity:
          domain: climate
    temperatur1:
      name: Temperatur 1
      description: Temperatur für das erste Zeitfenster
      selector:
        number:
          min: 5
          max: 40
          step: 0.5
          unit_of_measurement: "°C"
    zeit1:
      name: Startzeit 1
      description: Startzeit für das erste Zeitfenster (im Format hh:mm)
      selector:
        time: {}
    temperatur2:
      name: Temperatur 2
      description: Temperatur für das zweite Zeitfenster
      selector:
        number:
          min: 5
          max: 40
          step: 0.5
          unit_of_measurement: "°C"
    zeit2:
      name: Startzeit 2
      description: Startzeit für das zweite Zeitfenster (im Format hh:mm)
      selector:
        time: {}
    temperatur3:
      name: Temperatur 3
      description: Temperatur für das dritte Zeitfenster
      selector:
        number:
          min: 5
          max: 40
          step: 0.5
          unit_of_measurement: "°C"
    zeit3:
      name: Startzeit 3
      description: Startzeit für das dritte Zeitfenster (im Format hh:mm)
      selector:
        time: {}
    temperatur4:
      name: Temperatur 4
      description: Temperatur für das vierte Zeitfenster
      selector:
        number:
          min: 5
          max: 40
          step: 0.5
          unit_of_measurement: "°C"
    zeit4:
      name: Startzeit 4
      description: Startzeit für das vierte Zeitfenster (im Format hh:mm)
      selector:
        time: {}
    temperatur_abwesend:
      name: Temperatur bei Abwesenheit
      description: Temperatur, die während der Abwesenheit eingestellt werden soll
      selector:
        number:
          min: 5
          max: 40
          step: 0.5
          unit_of_measurement: "°C"

mode: restart
max_exceeded: silent

trigger:
  - platform: time
    minutes: "/1"

variables:
  entity_id: !input "entity_id"
  temperatur_abwesend: !input "temperatur_abwesend"

  action:
  - choose:
    # Wenn Abwesenheitstracker auslöst
    - conditions:
      - condition: state
        entity_id: !input 'anwesenheitstracker'
        state: 'not_home'
      sequence:
      - service: climate.set_temperature
        data:
          entity_id: !input 'climate_entity_id'
          temperature: !input 'temperatur_abwesenheit'
    # Wenn Anwesenheitstracker auslöst
    - conditions:
      - condition: state
        entity_id: !input 'anwesenheitstracker'
        state: 'home'
      sequence:
      - choose:
          # Wenn aktuelle Zeit innerhalb des Zeitfensters liegt
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit1, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit2, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit1'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit2, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit3, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit2'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit3, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit4, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit3'
          # Wenn aktuelle Zeit außerhalb der Zeitfenster liegt
          - conditions: "{{ now().strftime('%H:%M') < state_attr(input_datetime.zeit1, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit4'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit4, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit4'
