blueprint:
  name: Thermostat-Steuerung mit Anwesenheitskontrolle
  description: Steuert die Temperatur eines Thermostats basierend auf Anwesenheit und individuellen Zeitfenstern
  domain: automation
 
 input:
    anwesenheitstracker:
      name: Anwesenheitstracker
      description: Die Entity-ID des Anwesenheitstrackers.
      selector:
        entity:
          domain: device_tracker

    climate_entity_id:
      name: Thermostat-Entity
      description: Die Entity-ID des zu steuernden Thermostats.
      selector:
        entity:
          domain: climate

    temperatur_zeit1:
      name: Temperatur Zeitfenster 1
      description: Die Temperatur für das erste Zeitfenster.
      selector:
        number:
          min: -10
          max: 50
          step: 0.1
          unit_of_measurement: "°C"

    zeit1:
      name: Startzeit Zeitfenster 1
      description: Startzeit des ersten Zeitfensters.
      selector:
        time: {}

    temperatur_zeit2:
      name: Temperatur Zeitfenster 2
      description: Die Temperatur für das zweite Zeitfenster.
      selector:
        number:
          min: -10
          max: 50
          step: 0.1
          unit_of_measurement: "°C"

    zeit2:
      name: Startzeit Zeitfenster 2
      description: Startzeit des zweiten Zeitfensters.
      selector:
        time: {}

    temperatur_zeit3:
      name: Temperatur Zeitfenster 3
      description: Die Temperatur für das dritte Zeitfenster.
      selector:
        number:
          min: -10
          max: 50
          step: 0.1
          unit_of_measurement: "°C"

    zeit3:
      name: Startzeit Zeitfenster 3
      description: Startzeit des dritten Zeitfensters.
      selector:
        time: {}

    temperatur_zeit4:
      name: Temperatur Zeitfenster 4
      description: Die Temperatur für das vierte Zeitfenster.
      selector:
        number:
          min: -10
          max: 50
          step: 0.1
          unit_of_measurement: "°C"

    zeit4:
      name: Startzeit Zeitfenster 4
      description: Startzeit des vierten Zeitfensters.
      selector:
        time: {}


mode: restart
max_exceeded: silent

trigger:
  - platform: time
    minutes: "/1"

variables:
  entity_id: !input "entity_id"
  temperatur_abwesend: !input "temperatur_abwesend"

  action:
  - choose:
    # Wenn Abwesenheitstracker auslöst
    - conditions:
      - condition: state
        entity_id: !input 'anwesenheitstracker'
        state: 'not_home'
      sequence:
      - service: climate.set_temperature
        data:
          entity_id: !input 'climate_entity_id'
          temperature: !input 'temperatur_abwesenheit'
    # Wenn Anwesenheitstracker auslöst
    - conditions:
      - condition: state
        entity_id: !input 'anwesenheitstracker'
        state: 'home'
      sequence:
      - choose:
          # Wenn aktuelle Zeit innerhalb des Zeitfensters liegt
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit1, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit2, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit1'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit2, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit3, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit2'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit3, 'timestamp') and now().strftime('%H:%M') < state_attr(input_datetime.zeit4, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit3'
          # Wenn aktuelle Zeit außerhalb der Zeitfenster liegt
          - conditions: "{{ now().strftime('%H:%M') < state_attr(input_datetime.zeit1, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit4'
          - conditions: "{{ now().strftime('%H:%M') >= state_attr(input_datetime.zeit4, 'timestamp') }}"
            sequence:
            - service: climate.set_temperature
              data:
                entity_id: !input 'climate_entity_id'
                temperature: !input 'temperatur_zeit4'
