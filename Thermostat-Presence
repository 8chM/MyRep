blueprint:
  name: Thermostat mit Anwesenheitserkennung
  description: Eine Automatisierung, um das Thermostat basierend auf der Anwesenheit zu steuern
  domain: automation
  input:
    thermostat_entity:
      name: Thermostat Entity ID
      description: Entity ID des Thermostatgeräts
      selector:
        entity:
          domain: climate
    presence_check:
      name: Anwesenheitsüberwachung
      description: Boolean-Objekt, das bestimmt, ob Anwesenheitsüberwachung aktiviert ist
      default: input_boolean.presence_check
      selector:
        boolean: {}
    presence_entity:
      name: Anwesenheits-Entity-ID
      description: Entity ID der Entität, die die Anwesenheit anzeigt
      default: device_tracker.mein_telefon
      selector:
        entity:
          domain: device_tracker
    temp_morning:
      name: Morgen-Temperatur
      description: Temperatur für den Morgen
      default: 20
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: °C
    temp_day:
      name: Tages-Temperatur
      description: Temperatur für den Tag
      default: 22
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: °C
    temp_evening:
      name: Abend-Temperatur
      description: Temperatur für den Abend
      default: 20
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: °C
    temp_night:
      name: Nacht-Temperatur
      description: Temperatur für die Nacht
      default: 18
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: °C
  trigger:
    - platform: time
      at:
        - input_datetime.thermostat_time_morning
        - input_datetime.thermostat_time_day
        - input_datetime.thermostat_time_evening
        - input_datetime.thermostat_time_night
  condition:
    - condition: state
      entity_id: '{{ presence_check }}'
      state: 'on'
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: '{{ presence_entity }}'
              state: 'home'
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: '{{ thermostat_entity }}'
                temperature: '{{ temp_day }}'
        - conditions:
            - condition: time
              after: '{{ states("input_datetime.thermostat_time_morning") }}'
              before: '{{ states("input_datetime.thermostat_time_day") }}'
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: '{{ thermostat_entity }}'
                temperature: '{{ temp_morning }}'
        - conditions:
            - condition: time
              after: '{{ states("input_datetime.thermostat_time_day") }}'
              before: '{{ states("input_datetime.thermostat_time_evening") }}'
          sequence:
            - service: climate.set_temperature
              data:
                entity_id: '{{ thermostat_entity }}'
                temperature:
